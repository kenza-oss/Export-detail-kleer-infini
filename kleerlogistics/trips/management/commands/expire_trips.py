"""
Commande Django pour expirer automatiquement les trajets en retard
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db import transaction
from trips.signals import expire_expired_trips, cleanup_old_trips


class Command(BaseCommand):
    """Commande pour expirer les trajets en retard."""
    
    help = 'Expire automatiquement les trajets en retard et nettoie les anciens trajets'
    
    def add_arguments(self, parser):
        """Ajouter des arguments √† la commande."""
        parser.add_argument(
            '--cleanup',
            action='store_true',
            help='Nettoyer √©galement les anciens trajets (plus de 6 mois)'
        )
        
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simuler l\'ex√©cution sans effectuer de modifications'
        )
    
    def handle(self, *args, **options):
        """Ex√©cuter la commande."""
        self.stdout.write(
            self.style.SUCCESS('üöÄ D√©but de l\'expiration automatique des trajets...')
        )
        
        if options['dry_run']:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  Mode simulation activ√© - Aucune modification ne sera effectu√©e')
            )
        
        try:
            with transaction.atomic():
                # Expirer les trajets en retard
                if not options['dry_run']:
                    expire_expired_trips()
                
                # Nettoyer les anciens trajets si demand√©
                if options['cleanup']:
                    if not options['dry_run']:
                        cleanup_old_trips()
                    else:
                        self.stdout.write(
                            self.style.WARNING('üßπ Nettoyage des anciens trajets simul√©')
                        )
                
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Expiration automatique termin√©e avec succ√®s')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur lors de l\'expiration: {e}')
            )
            raise
